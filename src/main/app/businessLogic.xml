<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
    <data-mapper:config name="case_to_customobject" transformationGraphPath="case_to_customobject.grf" doc:name="case_to_customobject"/>
    <data-mapper:config name="customobject_to_case" transformationGraphPath="customobject_to_case.grf" doc:name="customobject_to_case"/>
    <batch:job name="batch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:process-records>
            <batch:step name="getCaseInBStep" filter-expression="#['B'.equals(flowVars['sourceSystem']) || payload['ExtId__c'] == null]">
                <enricher source="#[payload]" target="#[recordVars['caseInTargetInstance']]" doc:name="store Case">
	            	<sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Subject__c, LastModifiedDate FROM Case__c WHERE Id = '#[payload['ExtId__c']]'" doc:name="query Case CustomObject  from B"/>
                </enricher>
            
            </batch:step>
            <batch:step name="upsertCaseInBStep" filter-expression="#['B'.equals(flowVars['sourceSystem']) || (recordVars['contactInTargetInstance'] is NullPayload ? false : (recordVars['contactInTargetInstance'].get('LastModifiedDate') >= payload.get('LastModifiedDate')) || !('${sfdc.a.integration.user.id}' == payload.get('LastModifiedById')))]">
                <batch:set-record-variable variableName="#[payload.Account]" value="#[recordVars['createAccount']]" doc:name="prepare record Variable for subflow"/>
                <enricher source="#[payload]" doc:name="Message Enricher">
                    <flow-ref name="checkTargetAccountSubflow" doc:name="call checkTargetAccount subflow"/>
                </enricher>
                <logger message="AAAAZZZZ #[payload]" level="INFO" doc:name="Logger"/>
                <expression-component doc:name="prepare case for upsert"><![CDATA[payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');
payload.remove('ContactId');
//payload.remove('Account__c');
//payload.remove('AccountId');
]]></expression-component>
                <data-mapper:transform config-ref="case_to_customobject" doc:name="Case to CustomObject"/>
                <batch:commit size="100" doc:name="Batch Commit">
                    <logger message="AAAAA to upsert #[payload]" level="INFO" doc:name="Logger"/>
                    <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Case__c" doc:name="Upsert Case CustomObject in instance B">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="AAAAA upsert result to B #[payload]" level="INFO" doc:name="Logger"/>
                </batch:commit>

            </batch:step>
            <batch:step name="getCaseInAStep" filter-expression="#['A'.equals(flowVars['sourceSystem'])  || payload['CaseId__c'] == null]">
                <enricher source="#[payload]" target="#[recordVars['caseInTargetInstance']]" doc:name="store Case">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Subject, LastModifiedDate FROM Case WHERE Id = '#[payload['CaseId__c']]' " doc:name="query Case Object from instance A"/>
                </enricher>
            </batch:step>
            <batch:step name="upsertCaseInAStep" filter-expression="#['A'.equals(flowVars['sourceSystem']) || (recordVars['contactInTargetInstance'] is NullPayload ? false : (recordVars['contactInTargetInstance'].get('LastModifiedDate') &gt;= payload.get('LastModifiedDate')) || !('${sfdc.b.integration.user.id}' == payload.get('LastModifiedById')))]">
                <logger message="BBBBBZZZZ #[payload]" level="INFO" doc:name="Logger"/>
                <expression-component doc:name="prepare case for upsert"><![CDATA[payload.remove('LastModifiedById');
payload.remove('LastModifiedDate');
payload.remove('ContactId');

]]></expression-component>
                <data-mapper:transform doc:name="Customobject To Case" config-ref="customobject_to_case"/>
                <batch:commit size="100" doc:name="Batch Commit">
                    <logger message="BBBBB to upsert #[payload]" level="INFO" doc:name="Logger"/>
                    <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Case" doc:name="Upsert Case in instance A">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:upsert>
                    <logger message="BBBBB upsert result to A #[payload]" level="INFO" doc:name="Logger"/>
                </batch:commit>

            </batch:step>
           
        </batch:process-records>
    </batch:job>
    <sub-flow name="checkTargetAccountSubflow" doc:name="checkTargetAccountSubflow">
        <choice doc:name="Choice">
            <when expression="#[recordVars['createAccount'] != null &amp;&amp; 'A'.equals(flowVars['sourceSystem'])]">
                <enricher source="#[payload]" target="#[recordVars['targetAccount']]" doc:name="store account from B in recordVar">
                    <sfdc:query-single config-ref="SalesforceB" query="SELECT Id, Name from Account WHERE Name = '#[recordVars['createAccount'].Name]'" doc:name="Query Salesforce B for Account"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars['targetAccount'] is NullPayload]">
                        <enricher source="#[payload]" target="#[recordVars['targetAccount']]" doc:name="store id of account in B target instance">
                            <processor-chain doc:name="Processor Chain">
                                <sfdc:upsert config-ref="SalesforceB" externalIdFieldName="Id" type="Account" doc:name="Insert Account in Salesforce B">
                                    <sfdc:objects>
                                        <sfdc:object>
                                            <sfdc:inner-object key="Name">#[payload.Account.Name]</sfdc:inner-object>
                                        </sfdc:object>
                                    </sfdc:objects>
                                </sfdc:upsert>
                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get the id of the account created"/>
                            </processor-chain>
                        </enricher>
                        <expression-component doc:name="store Account Id in payload"><![CDATA[payload.put('AccountId', recordVars['targetAccount']);]]></expression-component>
                    </when>
                    <otherwise>
                        <expression-component doc:name="store Account Id in payload"><![CDATA[payload.put('AccountId', recordVars['targetAccount']['Id']);]]></expression-component>
                    </otherwise>
                </choice>
            </when>
            <when expression="#[recordVars['createAccount'] != null &amp;&amp; 'B'.equals(flowVars['sourceSystem'])]">
                <enricher source="#[payload]" target="#[recordVars['targetAccount']]" doc:name="store account from A in recordVar">
                    <sfdc:query-single config-ref="SalesforceA" query="SELECT Id, Name from Account WHERE Name = '#[recordVars['createAccount'].Name]'" doc:name="Query Salesforce A for Account"/>
                </enricher>
                <choice doc:name="Choice">
                    <when expression="#[recordVars['targetAccount'] is NullPayload]">
                        <enricher source="#[payload]" target="#[recordVars['targetAccount']]" doc:name="store id of account in A target instance">
                            <processor-chain doc:name="Processor Chain">
                                <sfdc:upsert config-ref="SalesforceA" externalIdFieldName="Id" type="Account" doc:name="Insert Account in Salesforce A">
                                    <sfdc:objects >
                                        <sfdc:object>
                                            <sfdc:inner-object key="Name">#[payload.Account.Name]</sfdc:inner-object>
                                        </sfdc:object>
                                    </sfdc:objects>
                                </sfdc:upsert>
                                <expression-transformer expression="#[payload[0].getId()]" doc:name="get the id of the account created"/>
                            </processor-chain>
                        </enricher>
                        <expression-component doc:name="store Account Id in payload"><![CDATA[payload.put('AccountId', recordVars['targetAccount']);]]></expression-component>
                    </when>
                    <otherwise>
                        <expression-component doc:name="store Account Id in payload"><![CDATA[payload.put('AccountId', recordVars['targetAccount']['Id']);]]></expression-component>
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <logger message="do nothing" level="INFO" doc:name="if AccountId is field empty do nothing"/>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
